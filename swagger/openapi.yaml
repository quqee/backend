openapi: 3.0.3
info:
  title: Hackathon - OpenAPI 3.0
  description: |-
    Some useful links:
    - [Git](https://github.com/StaZisS/test-task)
  termsOfService: http://swagger.io/terms/
  contact:
    email: inostaziss@gmail.com
  version: 1.0.0
servers:
  - url: https://api.quqee.tech/api/v1 # (если здесь изменить, исправить /ws://localhost:8080 в websocket)
tags:
  - name: user
    description: Операции с пользователем
paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: Вход пользователя
      description: Выполняя этот запрос вы получите access и refresh токены
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Успешный вход
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtResponse'
        '401':
          description: Неверный логин/пароль
          content:
            text/plain:
              schema:
                type: string
                example: Invalid email or password
  /auth/refresh:
    post:
      tags:
        - auth
      summary: Обновить токены
      description: Выполняя этот запрос вы получите access и refresh токены
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtResponse'
        '401':
          description: Невалидный refresh токен
          content:
            text/plain:
              schema:
                type: string
                example: Token expired
  /auth/logout:
    post:
      tags:
        - auth
      summary: Заблокировать токен
      description: ''
      operationId: logoutUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Успешно
        '401':
          description: Невалидный токен


  /defects:
    post:
      tags:
        - defect
      summary: Создать заявку с дефектом
      description: Фотограф отправляет снимки с дефектами
      operationId: createDefect()
      security:
        - auth-bearer: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateDefectRequest'


      responses:
        '200':
          description: Информация о заявке.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefectResponseDto'
        '403':
          description: Ошибка при авторизации
    put:
      tags:
        - defect
      summary: Обновить заявку с дефектом
      description: Фотограф обновляет снимки с дефектами полотна
      operationId: updateDefect()
      security:
        - auth-bearer: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateDefectRequest'
      responses:
        '200':
          description: Информация о заявке
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefectResponseDto'
        '403':
          description: Ошибка при авторизации
  /defects/{defectId}:
    get:
      tags:
        - defect
      summary: Получить информацию о дефекте
      operationId: getDefect()
      security:
        - auth-bearer: []
      parameters:
        - name: defectId
          in: path
          description: ID заявки, который нужно получить.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Информация о заявке.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalDefectResponseDto'
        '403':
          description: Ошибка при авторизации
  /defects/types:
    get:
      tags:
        - defect
      summary: Получить возможные типы дефектов
      operation: getAvailableDefect()
      responses:
        '200':
          description: Информация о возможных типах дефектов и наличия объема
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefectTypes'

  /statements:
    post:
      tags:
        - statement
      summary: Создать ведомость с дефектами
      description: Заказчик создает ведомость
      operationId: createStatement()
      security:
        - auth-bearer: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateStatementRequest'
      responses:
        '200':
          description: Созданная ведомость.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatementResponseDto'
        '403':
          description: Ошибка при авторизации
    put:
      tags:
        - statement
      summary: Обновить ведомость с дефектами
      description: Заказчик обновляет ведомость
      operationId: updateStatement()
      security:
        - auth-bearer: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateStatementRequest'
      responses:
        '200':
          description: Обновить ведомость.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatementResponseDto'
        '403':
          description: Ошибка при авторизации


  /statements/{statementId}:
    get:
      tags:
        - statement
      summary: Получить информацию о ведомости
      operationId: getStatement()
      security:
        - auth-bearer: []
      parameters:
        - name: statementId
          in: path
          description: ID отправителя, сообщения которого нужно получить.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Информация о ведомости.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalStatementResponseDto'
        '403':
          description: Ошибка при авторизации
    delete:
      tags:
        - statement
      summary: Удалить ведомость
      operationId: deleteStatement()
      security:
        - auth-bearer: []
      parameters:
        - name: statementId
          in: path
          description: ID ведомости, которую нужно удалить.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          description: Ошибка при авторизации

  /statements/my:
    get:
      tags:
        - statement
      summary: Получить мои ведомости
      operationId: getMyStatements()
      security:
        - auth-bearer: []
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedStatementDtoResult'
        '403':
          description: Ошибка при авторизации

  /statements/employee:
    post:
      tags:
        - statement
      summary: Назначить на ведомость сотрудника организации
      operationId: addEmployee()
      security:
        - auth-bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignmentEmployee'
      responses:
        '200':
          description: Информация о ведомости.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatementResponseDto'
        '403':
          description: Ошибка при авторизации


  /organizations:
    post:
      tags:
        - organization
      summary: Добавить работника
      description: Работодатель добавляет сотрудника в свою организацию
      operationId: createEmployee()
      security:
        - auth-bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddEmployeeRequest'
      responses:
        '200':
          description: Сотрудник успешно назначен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeDto'
        '403':
          description: Ошибка при авторизации
    put:
      tags:
        - organization
      summary: Обновить профиль работника
      description: Работодатель обновляет профиль работника
      operationId: updateEmployee()
      security:
        - auth-bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmployeeDto'
      responses:
        '200':
          description: Профиль сотрудника
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeDto'
        '403':
          description: Ошибка при авторизации

  /organizations/employee/all:
    get:
      tags:
        - organization
      summary: "Получить всех работников организации"
      operationId: getAllEmployee()
      security:
        - auth-bearer: []
      responses:
        '200':
          description: Список работников
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEmployeeDtoResult'
        '403':
          description: Ошибка при авторизации

  /organizations/{employeeId}:
    get:
      tags:
        - organization
      summary: "Получить профиль работника"
      description: ""
      operationId: getEmployee()
      security:
        - auth-bearer: []
      parameters:
        - name: employeeId
          in: path
          description: ID работника, которого нужно получить.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeDto'
        '403':
          description: Ошибка при авторизации
    delete:
      tags:
        - organization
      summary: Удалить работника
      description: ""
      operationId: deleteEmployee()
      security:
        - auth-bearer: []
      parameters:
        - name: employeeId
          in: path
          description: ID работника, которого нужно удалить.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '403':
          description: Ошибка при авторизации


  /users/my/profile:
    get:
      tags:
        - user
      summary: Получить свой профиль
      description: ''
      operationId: getMyProfile
      security:
        - auth-bearer: [ ]
      responses:
        '200':
          description: Успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '401':
          description: Невалидный access токен
    put:
      tags:
        - user
      summary: Обновить свой профиль
      description: ''
      operationId: updateMyProfile
      security:
        - auth-bearer: [ ]
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfileRequest'
      responses:
        '200':
          description: Успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '401':
          description: Нет токена

  /users/available:
    get:
      tags:
        - user
      summary: Получить пользователей (для чата)
      description: ''
      operationId: getUsers
      security:
        - auth-bearer: [ ]
      parameters:
        - name: online
          in: query
          description: Статус онлайн пользователя (true - онлайн, false - оффлайн, null - все)
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Список пользователей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
        '403':
          description: Ошибка при авторизации

  /messages/{senderId}:
    get:
      tags:
        - message
      summary: Найти сообщения чата
      description: Получить сообщения чата для указанного отправителя с возможностью пагинации.
      operationId: findChatMessages
      security:
        - auth-bearer: []
      parameters:
        - name: senderId
          in: path
          description: ID отправителя, сообщения которого нужно получить.
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: Номер страницы для пагинации. По умолчанию 0.
          required: false
          schema:
            type: integer
            format: int32
        - name: size
          in: query
          description: Количество сообщений на странице. По умолчанию 10.
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Список сообщений чата с метаданными пагинации.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMessageDtoResult'
        '403':
          description: Ошибка при авторизации

  /app/chat:
    post:
      tags:
        - websocket
      summary: Отправить сообщение пользователю
      description: 'URL - ws://api.quqee.tech:8080/ws/app/chat'
      operationId: sendMessage
      security:
        - auth-bearer: [ ]
      requestBody:
        description: Это Payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestMessageDto'
      responses:
        '200':
          description: |
            Чтобы получить сообщения в статусе получателя, вам нужно подписаться на топик по адресу ws://api.quqee.tech:8080/ws/topic/UUID_RECIPIENT_ID/messages
            Не обращайте внимание на 200 статус код https://kapeli.com/cheat_sheets/WebSocket_Status_Codes.docset/Contents/Resources/Documents/index
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseNotificationDto'
  /app/user.connectUser:
    post:
      tags:
        - websocket
      summary: Установить онлайн статус
      description: 'URL - ws://api.quqee.tech:8080/ws/app/user.connectUser'
      operationId: setOnlineTrue
      security:
        - auth-bearer: [ ]
      responses:
        '200' :
          description: |
            Чтобы получить обновления о статусе пользователей, вам нужно подписаться на топик по адресу ws://api.quqee.tech:8080/ws/user/public
            Не обращайте внимание на 200 статус код https://kapeli.com/cheat_sheets/WebSocket_Status_Codes.docset/Contents/Resources/Documents/index
  /app/user.disconnectUser:
    post:
      tags:
        - websocket
      summary: Установить офлайн статус
      description: 'URL - ws://api.quqee.tech:8080/ws/app/user.disconnectUser'
      operationId: setOnlineFalse
      security:
        - auth-bearer: [ ]
      responses:
        '200' :
          description: |
            Чтобы получить обновления о статусе пользователей, вам нужно подписаться на топик по адресу ws://api.quqee.tech:8080/ws/user/public
            Не обращайте внимание на 200 статус код https://kapeli.com/cheat_sheets/WebSocket_Status_Codes.docset/Contents/Resources/Documents/index 

components:
  schemas:
    UpdateUserProfileRequest:
      type: object
      properties:
        full_name:
          type: string
          example: John
          nullable: false
        email:
          type: string
          example: john@gmail.com
          nullable: false

    AddEmployeeRequest:
      type: object
      properties:
        username:
          type: string
          example: john
          nullable: false
        full_name:
          type: string
          example: John Statehon
          nullable: false
        email:
          type: string
          example: john@gmail.com
          nullable: false
        password:
          type: string
          example: 12345
          nullable: false
    UpdateEmployeeDto:
      type: object
      properties:
        username:
          type: string
          example: john
        full_name:
          type: string
          example: John Statehon
        email:
          type: string
          example: john@gmail.com
        password:
          type: string
          example: 12345

    EmployeeDto:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        username:
          type: string
          example: john
          nullable: false
        full_name:
          type: string
          example: John Statehon
          nullable: false
        email:
          type: string
          example: john@gmail.com
          nullable: false

    CreateDefectRequest:
      type: object
      properties:
        longitude:
          type: number
          format: double
          nullable: false
        latitude:
          type: number
          format: double
          nullable: false
        defect_type:
          type: string
          example: Поперечная трещина
          nullable: false
        defect_distance:
          type: number
          format: double
          nullable: false
        files:
          type: array
          items:
            type: string
            format: binary

    UpdateDefectRequest:
      type: object
      properties:
        defect_id:
          type: string
          format: uuid
          nullable: false
        longitude:
          type: number
          format: double
        latitude:
          type: number
          format: double
        defect_type:
          type: string
          example: Поперечная трещина
        defect_distance:
          type: number
          format: double
        files:
          type: array
          items:
            type: string
            format: binary

    DefectResponseDto:
      type: object
      properties:
        defect_id:
          type: string
          format: uuid
        longitude:
          type: number
          format: double
          nullable: false
        latitude:
          type: number
          format: double
          nullable: false
        defect_type:
          type: string
          example: Поперечная трещина
          nullable: false
        defect_distance:
          type: number
          format: double
          nullable: false
        create_time:
          type: string
          format: date-time
          example: '2025-07-21T17:32:28Z'
          nullable: false
        application_status:
          type: string
          format: string
          example: OPEN

    AdditionalDefectResponseDto:
      type: object
      properties:
        defect_id:
          type: string
          format: uuid
        longitude:
          type: number
          format: double
          nullable: false
        latitude:
          type: number
          format: double
          nullable: false
        defect_type:
          type: string
          example: Поперечная трещина
          nullable: false
        defect_distance:
          type: number
          format: double
          nullable: false
        create_time:
          type: string
          format: date-time
          example: '2025-07-21T17:32:28Z'
          nullable: false
        application_status:
          type: string
          format: string
          example: OPEN
        pictures:
          type: array
          items:
            type: string
            example: https://imgbb.com/picture

    CreateStatementRequest:
      type: object
      properties:
        area_name:
          type: string
          example: Магистраль Москва-Казань
        length:
          type: number
          format: double
        road_type:
          type: string
          example: HIGHWAY
        surface_type:
          type: string
          example: ASPHALT
        direction:
          type: string
          nullable: false
        deadline:
          type: string
          format: date-time
          example: '2025-07-21T17:32:28Z'
          nullable: false
        defects:
          type: array
          items:
            type: string
            format: uuid
        file:
          type: string
          format: binary

    UpdateStatementRequest:
      type: object
      properties:
        area_name:
          type: string
          example: Магистраль Москва-Казань
        length:
          type: number
          format: double
        road_type:
          type: string
          example: HIGHWAY
        surface_type:
          type: string
          example: ASPHALT
        direction:
          type: string
          nullable: false
        deadline:
          type: string
          format: date-time
          example: '2025-07-21T17:32:28Z'
          nullable: false
        statement_status:
          type: string
          example: IN_PROCESS
        organization_performer_id:
          type: string
          format: uuid
        defects:
          type: array
          items:
            type: string
            format: uuid
        file:
          type: string
          format: binary

    AssignmentEmployee:
      type: object
      properties:
        statement_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid

    StatementResponseDto:
      type: object
      properties:
        statement_id:
          type: string
          format: uuid
        area_name:
          type: string
          example: Магистраль Москва-Казань
        length:
          type: number
          format: double
        road_type:
          type: string
          example: HIGHWAY
        surface_type:
          type: string
          example: ASPHALT
        direction:
          type: string
          nullable: false
        deadline:
          type: string
          format: date-time
          example: '2025-07-21T17:32:28Z'
          nullable: false
        create_time:
          type: string
          format: date-time
          example: '2024-07-21T17:32:28Z'
          nullable: false
        description:
          type: string
          example: Большие ямы на дорогах
        statement_status:
          type: string
          example: REJECTED
        organization_performer_id:
          type: string
          format: uuid
        organization_creator_id:
          type: string
          format: uuid
          nullable: false

    AdditionalStatementResponseDto:
      type: object
      properties:
        statement_id:
          type: string
          format: uuid
        area_name:
          type: string
          example: Магистраль Москва-Казань
        length:
          type: number
          format: double
        road_type:
          type: string
          example: HIGHWAY
        surface_type:
          type: string
          example: ASPHALT
        direction:
          type: string
          nullable: false
        deadline:
          type: string
          format: date-time
          example: '2025-07-21T17:32:28Z'
          nullable: false
        create_time:
          type: string
          format: date-time
          example: '2024-07-21T17:32:28Z'
          nullable: false
        description:
          type: string
          example: Большие ямы на дорогах
        statement_status:
          type: string
          example: REJECTED
        organization_performer_id:
          type: string
          format: uuid
        organization_creator_id:
          type: string
          format: uuid
          nullable: false
        defects:
          type: array
          items:
            $ref: '#/components/schemas/ShortDefectDto'

    DefectTypes:
      type: object
      properties:
        types:
          type: array
          items:
            type: object
            properties:
              defect_type:
                type: string
                example: Стирание краски
              has_distance:
                type: boolean
                example: true

    ShortDefectDto:
      type: object
      properties:
        defect_id:
          type: string
          format: uuid
        application_status:
          type: string
          example: OPEN
        defect_type:
          type: string
          example: REJECTED
        description:
          type: string
          example: Вожовский переулок

    PaginatedStatementDtoResult:
      type: object
      properties:
        content:
          $ref: '#/components/schemas/StatementResponseDto'
        metadata:
          $ref: '#/components/schemas/Metadata'
      required:
        - content
        - metadata

    PaginatedEmployeeDtoResult:
      type: object
      properties:
        content:
          $ref: '#/components/schemas/EmployeeDto'
        metadata:
          $ref: '#/components/schemas/Metadata'
      required:
        - content
        - metadata

    PaginatedMessageDtoResult:
      type: object
      properties:
        content:
          $ref: '#/components/schemas/MessageDto'
        metadata:
          $ref: '#/components/schemas/Metadata'
      required:
        - content
        - metadata

    Metadata:
      type: object
      properties:
        page:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int32

    MessageDto:
      type: object
      properties:
        message_id:
          type: string
          format: uuid
        chat_room_id:
          type: string
          format: uuid
        sender_id:
          type: string
          format: uuid
        recipient_id:
          type: string
          format: uuid
        content:
          type: string
          example: Hello World!
        created_at:
          type: string
          format: date-time
          example: 2024-09-15T13:50:30.526+07:00
        my_message:
          type: boolean
          example: true

    JwtResponse:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiJjZmJlOWFjOS05MTQ0LTRmZWMtOWViMi1mYjU0NzJiNDEzMjIiLCJyb2xlIjpbIkRFRkFVTFQiXSwiZXhwIjoxNzExOTgxMTIzLCJqdGkiOiJmZWFmMDNkMy00NDFkLTRlNmQtYjBkOS1iYWI1YzQ4MzU1ZWQifQ.R_fBQ-HRbT5JT6KahcP4vbsGluNuI-nW2vnY3xAuhv7XME1hi6uW2XgGThHrlcy2
          nullable: false
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiJjZmJlOWFjOS05MTQ0LTRmZWMtOWViMi1mYjU0NzJiNDEzMjIiLCJleHAiOjE3OTc0ODExMjMsImp0aSI6IjA3NDAyMzAyLWMzNTctNGI0MS1hY2I0LTBlMTQxMDE1N2ZkOCJ9.lCXc_mj5a090BObdZf1RGT-hnGxSDmL6UkxFZ9mFVKAiYbpCGScAAzB_xfqi9WQE
          nullable: false

    ErrorMessage:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: john@gmail.com
        password:
          type: string
          example: 12345

    RefreshRequest:
      type: object
      properties:
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiJjZmJlOWFjOS05MTQ0LTRmZWMtOWViMi1mYjU0NzJiNDEzMjIiLCJleHAiOjE3OTc0ODExMjMsImp0aSI6IjA3NDAyMzAyLWMzNTctNGI0MS1hY2I0LTBlMTQxMDE1N2ZkOCJ9.lCXc_mj5a090BObdZf1RGT-hnGxSDmL6UkxFZ9mFVKAiYbpCGScAAzB_xfqi9WQE
          nullable: false

    UserDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
          example: john
        full_name:
          type: string
          example: Gurney Halleck
        email:
          type: string
          example: john@email.com
        online_status:
          type: boolean
          example: false
        organization_id:
          type: string
          format: uuid
        organization_name:
          type: string
          example: ООО Дороги

    RequestMessageDto:
      type: object
      properties:
        recipientId:
          type: string
          format: uuid
        content:
          type: string
          example: Hello World!

    ResponseNotificationDto:
      type: object
      properties:
        notificationId:
          type: string
          format: uuid
        senderId:
          type: string
          format: uuid
        receiverId:
          type: string
          format: uuid
        content:
          type: string
          example: Hello World!


  securitySchemes:
    auth-bearer:
      type: http
      scheme: bearer
